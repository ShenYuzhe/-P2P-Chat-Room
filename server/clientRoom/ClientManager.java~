package clientRoom;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Set;
import java.util.Map.Entry;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


public class ClientManager {
	private String pathName = "./credentials.txt";
	private Hashtable<String, ClientObj> ClientTable = new Hashtable<String, ClientObj>();
	public Hashtable<String, ClientTalk> OnlineTable = new Hashtable<String, ClientTalk>();
	private Hashtable<String, ClientTalk> LoginTable = new Hashtable<String, ClientTalk>();
	private Hashtable<String, Long> BlockTable = new Hashtable<String, Long>();
	
	public static final int CLIENTONLINE = 0;
	public static final int CLIENTOFFLINE = 1;
	public static final int CLIENTNOTFOUND = 2;
	
	public ClientManager() {
		initCredential();
		printClients();
		timeScanner timeoutChecker = new timeScanner();
		Thread timeThread = new Thread(timeoutChecker);
		timeThread.start();
	}
	
	public void scanTimeOut(long timeout) throws JSONException {
		long currTime = System.currentTimeMillis();
		for (Iterator iter = OnlineTable.keySet().iterator(); iter.hasNext();) {
			String key = (String)iter.next();
			ClientTalk talk = OnlineTable.get(key);
			if (currTime - talk.getLastBeat() >= timeout) {
				JSONObject timeoutJSON = new JSONObject();
				timeoutJSON.put("type", "timeout");
				reqType timeoutReq = new reqType();
				timeoutReq.reqJSON = timeoutJSON;
				talk.insertRequest(timeoutReq);
			}
		}
		
		for (Iterator iter = LoginTable.keySet().iterator(); iter.hasNext();) {
			String key = (String)iter.next();
			ClientTalk talk = LoginTable.get(key);
			if (currTime - talk.getLastBeat() >= timeout) {
				JSONObject timeoutJSON = new JSONObject();
				timeoutJSON.put("type", "login_timeout");
				reqType timeoutReq = new reqType();
				timeoutReq.reqJSON = timeoutJSON;
				talk.insertRequest(timeoutReq);
			}
		}
		
		for (Iterator iter = LoginTable.keySet().iterator(); iter.hasNext();) {
			String key = (String)iter.next();
			ClientTalk talk = LoginTable.get(key);
			if (currTime - talk.getLastBeat() >= timeout) {
				JSONObject timeoutJSON = new JSONObject();
				timeoutJSON.put("type", "login_timeout");
				reqType timeoutReq = new reqType();
				timeoutReq.reqJSON = timeoutJSON;
				talk.insertRequest(timeoutReq);
			}
		}
		
		for (Iterator iter = BlockTable.keySet().iterator(); iter.hasNext();) {
			String key = (String)iter.next();
			Long blockTime = BlockTable.get(key);
			if (currTime - blockTime >= timeout) {
				this.BlockTable.remove(key);
			}
		}
	}
	
	public JSONObject messageCenter(reqType reqPackage) throws JSONException {
		String searchName = "";
		JSONObject respJSON = new JSONObject();
		searchName = reqPackage.reqJSON.getString("toname");
		ClientTalk talk = OnlineTable.get(searchName);
		if (talk != null) {
			respJSON.put("type", "success");
			talk.insertRequest(reqPackage);
			return respJSON;
		}
		
		if (reqPackage.reqJSON.getString("type").equals("forcelogout"))
			return respJSON;
		
		ClientObj client = ClientTable.get(searchName);
		if (client != null) {
			respJSON.put("type", "useroffline");
			client.leaveMessage(reqPackage);
			return respJSON;
		}
		respJSON.put("type", "error");
		respJSON.put("reason", "user not exist");
		return respJSON;
	}
	
	public JSONObject broadcast(reqType reqPackage) throws JSONException {
		for (Iterator iter = OnlineTable.keySet().iterator(); iter.hasNext();) {
			String key = (String)iter.next();
			if (!key.equals(reqPackage.reqJSON.getString("fromname"))) {
				ClientTalk talk = OnlineTable.get(key);
				talk.insertRequest(reqPackage);
			}
		}
		JSONObject respJSON = new JSONObject();
		respJSON.put("type", "success");
		return respJSON;
	}
	
	public void printClients() {
		for (Iterator iter = ClientTable.keySet().iterator(); iter.hasNext();) {
			String key = (String)iter.next();
			ClientObj client = ClientTable.get(key);
			System.out.println(key + " " + client.password);
		}
	}
	
	public JSONArray getOnlineList() {
		JSONArray onlineList = new JSONArray();
		for (Iterator iter = OnlineTable.keySet().iterator(); iter.hasNext();) {
			onlineList.put((String)iter.next());
		}
		return onlineList;
	}
	
	public boolean isInBlackList(String toname, String fromname) {
		boolean isBlocked = false;
		ClientObj client = this.ClientTable.get(toname);
		if (client.isInBlackList(fromname))
			isBlocked = true;
		return isBlocked;
	}
	
	public boolean isUserOnline(String username) {
		boolean isOnline = false;
		ClientTalk talk = OnlineTable.get(username);
		if (talk != null)
			isOnline = true;
		return isOnline;
	}
	
	public JSONObject getIpbyName(String toname, String fromname) {
		JSONObject respJSON = null;
		ClientTalk talk = OnlineTable.get(toname);
		if (talk == null) {
			try {
				respJSON = new JSONObject();
				respJSON.put("type", "error");
				respJSON.put("reason", "user not online");
			} catch (Exception e) {}
		} else {
			respJSON = talk.getIpAddress(fromname);
		}
		return respJSON;
	}
	
	private void register(JSONObject JSONreq, Socket clntSock) throws JSONException, IOException {
		String username = JSONreq.getString("username");
		String address = JSONreq.getString("address");
		ClientObj client = ClientTable.get(username);
		JSONObject respJSON;
		PrintStream out = new PrintStream(clntSock.getOutputStream());
		if (client == null) {
			respJSON = new JSONObject();
			respJSON.put("type", "invalid name");
			out.println(respJSON.toString());
			return;
		}
		Long blockTime = this.BlockTable.get(username);
		if (blockTime != null) {
			respJSON = new JSONObject();
			respJSON.put("type", "multiple failure");
			out.println(respJSON.toString());
			return;
		}
		ClientTalk newTalk = new ClientTalk(client, clntSock, address);
		reqType loginReq = new reqType();
		loginReq.reqJSON = JSONreq;
		loginReq.socket = clntSock;
		newTalk.insertRequest(loginReq);
		Thread talkThread = new Thread(newTalk);
		talkThread.start();
		this.LoginTable.put(address, newTalk);
	}
	
	void warnLogout(Socket clntSock) {
		JSONObject warnJSON = new JSONObject();
		reqType warnReq = new reqType();
		try {
			warnJSON.put("type", "logout");
			warnJSON.put("reason", "already logout");
			PrintStream out = new PrintStream(clntSock.getOutputStream());
			out.println(warnJSON.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void distributeReq(String reqStr, Socket clntSock) throws JSONException, IOException {
		System.out.println(reqStr);
		JSONObject reqJSON = new JSONObject(reqStr);
		JSONObject respJSON = new JSONObject();
		PrintStream clntOut = new PrintStream(clntSock.getOutputStream());
		if (reqJSON.getString("type") == null) {
			respJSON.put("type", "error");
			respJSON.put("reason", "invalid operation");
			clntOut.println(respJSON.toString());
		} else if (reqJSON.getString("type").equals("login")) {
			try {
				String address = reqJSON.getString("address");
				ClientTalk loginTalk = this.LoginTable.get(address);
				if (loginTalk != null) {
					reqType loginReq = new reqType(clntSock, reqJSON);
					loginTalk.insertRequest(loginReq);
				} else
					register(reqJSON, clntSock);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			ClientTalk talk = OnlineTable.get(reqJSON.getString("username"));
			if (talk == null) {///not defined!!!!!!!!
				warnLogout(clntSock);
			} else {
				reqType newReq = new reqType(clntSock, reqJSON);
				talk.insertRequest(newReq);
			}
		}
	}
	
	private void initCredential() {
		try {
			File filename = new File(pathName);
			InputStreamReader reader = new InputStreamReader(
					new FileInputStream(filename));
			BufferedReader bufReader = new BufferedReader(reader);
			
			String line = "";
			while (line != null) {
				line = bufReader.readLine();
				if (line == null)
					break;
				String[] fields = new String[2];
				fields = line.split(" ");
				ClientTable.put(fields[0], new ClientObj(fields[0], fields[1]));
			}
			
			bufReader.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void setOnline(String username, ClientTalk newtalk) {
		OnlineTable.put(username, newtalk);
		System.out.println("Inserted");
	}
	
	public void leaveLoginList(String address) {
		this.LoginTable.remove(address);
	}
	
	public void setBlock(String username) {
		
		this.BlockTable.put(username, System.currentTimeMillis());
	}
	
	public void setOffline(String username, String IP, int Port) {
		ClientTalk talk = OnlineTable.get(username);
		JSONObject address = talk.getIpAddress(username);
		try {
			if (address.getString("IP").equals(IP) && address.getInt("Port") == Port)
				OnlineTable.remove(username);
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("removed");
	}
	
	public void kickByName(String username) {
		OnlineTable.remove(username);
	}
}
